
Grammar
rule 1    program -> stmt_sequence
rule 2    stmt_sequence -> stmt_sequence statement FIN
rule 3    stmt_sequence -> statement FIN
rule 4    statement -> if_stmt
rule 5    statement -> repeat_stmt
rule 6    statement -> assign_stmt
rule 7    statement -> read_stmt
rule 8    statement -> write_stmt
rule 9    if_stmt -> if_flag exp THEN stmt_sequence END
rule 10   if_stmt -> if_flag exp THEN stmt_sequence ELSE stmt_sequence END
rule 11   repeat_stmt -> re_flag stmt_sequence UNTIL exp
rule 12   assign_stmt -> var_name ASS exp
rule 13   read_stmt -> READ var_name
rule 14   write_stmt -> WRITE var_name
rule 15   exp -> simple_exp LT simple_exp
rule 16   exp -> simple_exp GT simple_exp
rule 17   exp -> simple_exp EQ simple_exp
rule 18   exp -> simple_exp GQ simple_exp
rule 19   exp -> simple_exp LQ simple_exp
rule 20   exp -> simple_exp
rule 21   simple_exp -> simple_exp ADD term
rule 22   simple_exp -> simple_exp SUB term
rule 23   simple_exp -> term
rule 24   term -> term MUL factor
rule 25   term -> term DIV factor
rule 26   term -> factor
rule 27   term -> var_name
rule 28   factor -> LB exp RB
rule 29   factor -> NUM
rule 30   var_name -> IDENTIFIER
rule 31   if_flag -> IF
rule 32   re_flag -> REPEAT

Terminals, with rules where they appear

$ (-1)
error (256)
FIN (257) 2 3
ASS (258) 12
GT (259) 16
LT (260) 15
EQ (261) 17
GQ (262) 18
LQ (263) 19
ADD (264) 21
SUB (265) 22
MUL (266) 24
DIV (267) 25
LB (268) 28
RB (269) 28
READ (270) 13
WRITE (271) 14
IF (272) 31
THEN (273) 9 10
END (274) 9 10
ELSE (275) 10
REPEAT (276) 32
UNTIL (277) 11
NUM (278) 29
IDENTIFIER (279) 30

Nonterminals, with rules where they appear

program (26)
    on left: 1
stmt_sequence (27)
    on left: 2 3, on right: 1 2 9 10 11
statement (28)
    on left: 4 5 6 7 8, on right: 2 3
if_stmt (29)
    on left: 9 10, on right: 4
repeat_stmt (30)
    on left: 11, on right: 5
assign_stmt (31)
    on left: 12, on right: 6
read_stmt (32)
    on left: 13, on right: 7
write_stmt (33)
    on left: 14, on right: 8
exp (34)
    on left: 15 16 17 18 19 20, on right: 9 10 11 12 28
simple_exp (35)
    on left: 21 22 23, on right: 15 16 17 18 19 20 21 22
term (36)
    on left: 24 25 26 27, on right: 21 22 23 24 25
factor (37)
    on left: 28 29, on right: 24 25 26
var_name (38)
    on left: 30, on right: 12 13 14 27
if_flag (39)
    on left: 31, on right: 9 10
re_flag (40)
    on left: 32, on right: 11


state 0

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    REPEAT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5

    program	go to state 59
    stmt_sequence	go to state 6
    statement	go to state 7
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 1

    read_stmt  ->  READ . var_name   (rule 13)

    IDENTIFIER	shift, and go to state 5

    var_name	go to state 16



state 2

    write_stmt  ->  WRITE . var_name   (rule 14)

    IDENTIFIER	shift, and go to state 5

    var_name	go to state 17



state 3

    if_flag  ->  IF .   (rule 31)

    $default	reduce using rule 31 (if_flag)



state 4

    re_flag  ->  REPEAT .   (rule 32)

    $default	reduce using rule 32 (re_flag)



state 5

    var_name  ->  IDENTIFIER .   (rule 30)

    $default	reduce using rule 30 (var_name)



state 6

    program  ->  stmt_sequence .   (rule 1)
    stmt_sequence  ->  stmt_sequence . statement FIN   (rule 2)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    REPEAT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5

    $default	reduce using rule 1 (program)

    statement	go to state 18
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 7

    stmt_sequence  ->  statement . FIN   (rule 3)

    FIN 	shift, and go to state 19



state 8

    statement  ->  if_stmt .   (rule 4)

    $default	reduce using rule 4 (statement)



state 9

    statement  ->  repeat_stmt .   (rule 5)

    $default	reduce using rule 5 (statement)



state 10

    statement  ->  assign_stmt .   (rule 6)

    $default	reduce using rule 6 (statement)



state 11

    statement  ->  read_stmt .   (rule 7)

    $default	reduce using rule 7 (statement)



state 12

    statement  ->  write_stmt .   (rule 8)

    $default	reduce using rule 8 (statement)



state 13

    assign_stmt  ->  var_name . ASS exp   (rule 12)

    ASS 	shift, and go to state 20



state 14

    if_stmt  ->  if_flag . exp THEN stmt_sequence END   (rule 9)
    if_stmt  ->  if_flag . exp THEN stmt_sequence ELSE stmt_sequence END   (rule 10)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    exp 	go to state 23
    simple_exp	go to state 24
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 15

    repeat_stmt  ->  re_flag . stmt_sequence UNTIL exp   (rule 11)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    REPEAT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5

    stmt_sequence	go to state 28
    statement	go to state 7
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 16

    read_stmt  ->  READ var_name .   (rule 13)

    $default	reduce using rule 13 (read_stmt)



state 17

    write_stmt  ->  WRITE var_name .   (rule 14)

    $default	reduce using rule 14 (write_stmt)



state 18

    stmt_sequence  ->  stmt_sequence statement . FIN   (rule 2)

    FIN 	shift, and go to state 29



state 19

    stmt_sequence  ->  statement FIN .   (rule 3)

    $default	reduce using rule 3 (stmt_sequence)



state 20

    assign_stmt  ->  var_name ASS . exp   (rule 12)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    exp 	go to state 30
    simple_exp	go to state 24
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 21

    factor  ->  LB . exp RB   (rule 28)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    exp 	go to state 31
    simple_exp	go to state 24
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 22

    factor  ->  NUM .   (rule 29)

    $default	reduce using rule 29 (factor)



state 23

    if_stmt  ->  if_flag exp . THEN stmt_sequence END   (rule 9)
    if_stmt  ->  if_flag exp . THEN stmt_sequence ELSE stmt_sequence END   (rule 10)

    THEN	shift, and go to state 32



state 24

    exp  ->  simple_exp . LT simple_exp   (rule 15)
    exp  ->  simple_exp . GT simple_exp   (rule 16)
    exp  ->  simple_exp . EQ simple_exp   (rule 17)
    exp  ->  simple_exp . GQ simple_exp   (rule 18)
    exp  ->  simple_exp . LQ simple_exp   (rule 19)
    exp  ->  simple_exp .   (rule 20)
    simple_exp  ->  simple_exp . ADD term   (rule 21)
    simple_exp  ->  simple_exp . SUB term   (rule 22)

    GT  	shift, and go to state 33
    LT  	shift, and go to state 34
    EQ  	shift, and go to state 35
    GQ  	shift, and go to state 36
    LQ  	shift, and go to state 37
    ADD 	shift, and go to state 38
    SUB 	shift, and go to state 39

    $default	reduce using rule 20 (exp)



state 25

    simple_exp  ->  term .   (rule 23)
    term  ->  term . MUL factor   (rule 24)
    term  ->  term . DIV factor   (rule 25)

    MUL 	shift, and go to state 40
    DIV 	shift, and go to state 41

    $default	reduce using rule 23 (simple_exp)



state 26

    term  ->  factor .   (rule 26)

    $default	reduce using rule 26 (term)



state 27

    term  ->  var_name .   (rule 27)

    $default	reduce using rule 27 (term)



state 28

    stmt_sequence  ->  stmt_sequence . statement FIN   (rule 2)
    repeat_stmt  ->  re_flag stmt_sequence . UNTIL exp   (rule 11)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    REPEAT	shift, and go to state 4
    UNTIL	shift, and go to state 42
    IDENTIFIER	shift, and go to state 5

    statement	go to state 18
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 29

    stmt_sequence  ->  stmt_sequence statement FIN .   (rule 2)

    $default	reduce using rule 2 (stmt_sequence)



state 30

    assign_stmt  ->  var_name ASS exp .   (rule 12)

    $default	reduce using rule 12 (assign_stmt)



state 31

    factor  ->  LB exp . RB   (rule 28)

    RB  	shift, and go to state 43



state 32

    if_stmt  ->  if_flag exp THEN . stmt_sequence END   (rule 9)
    if_stmt  ->  if_flag exp THEN . stmt_sequence ELSE stmt_sequence END   (rule 10)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    REPEAT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5

    stmt_sequence	go to state 44
    statement	go to state 7
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 33

    exp  ->  simple_exp GT . simple_exp   (rule 16)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    simple_exp	go to state 45
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 34

    exp  ->  simple_exp LT . simple_exp   (rule 15)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    simple_exp	go to state 46
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 35

    exp  ->  simple_exp EQ . simple_exp   (rule 17)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    simple_exp	go to state 47
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 36

    exp  ->  simple_exp GQ . simple_exp   (rule 18)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    simple_exp	go to state 48
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 37

    exp  ->  simple_exp LQ . simple_exp   (rule 19)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    simple_exp	go to state 49
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 38

    simple_exp  ->  simple_exp ADD . term   (rule 21)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    term	go to state 50
    factor	go to state 26
    var_name	go to state 27



state 39

    simple_exp  ->  simple_exp SUB . term   (rule 22)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    term	go to state 51
    factor	go to state 26
    var_name	go to state 27



state 40

    term  ->  term MUL . factor   (rule 24)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22

    factor	go to state 52



state 41

    term  ->  term DIV . factor   (rule 25)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22

    factor	go to state 53



state 42

    repeat_stmt  ->  re_flag stmt_sequence UNTIL . exp   (rule 11)

    LB  	shift, and go to state 21
    NUM 	shift, and go to state 22
    IDENTIFIER	shift, and go to state 5

    exp 	go to state 54
    simple_exp	go to state 24
    term	go to state 25
    factor	go to state 26
    var_name	go to state 27



state 43

    factor  ->  LB exp RB .   (rule 28)

    $default	reduce using rule 28 (factor)



state 44

    stmt_sequence  ->  stmt_sequence . statement FIN   (rule 2)
    if_stmt  ->  if_flag exp THEN stmt_sequence . END   (rule 9)
    if_stmt  ->  if_flag exp THEN stmt_sequence . ELSE stmt_sequence END   (rule 10)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    END 	shift, and go to state 55
    ELSE	shift, and go to state 56
    REPEAT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5

    statement	go to state 18
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 45

    exp  ->  simple_exp GT simple_exp .   (rule 16)
    simple_exp  ->  simple_exp . ADD term   (rule 21)
    simple_exp  ->  simple_exp . SUB term   (rule 22)

    ADD 	shift, and go to state 38
    SUB 	shift, and go to state 39

    $default	reduce using rule 16 (exp)



state 46

    exp  ->  simple_exp LT simple_exp .   (rule 15)
    simple_exp  ->  simple_exp . ADD term   (rule 21)
    simple_exp  ->  simple_exp . SUB term   (rule 22)

    ADD 	shift, and go to state 38
    SUB 	shift, and go to state 39

    $default	reduce using rule 15 (exp)



state 47

    exp  ->  simple_exp EQ simple_exp .   (rule 17)
    simple_exp  ->  simple_exp . ADD term   (rule 21)
    simple_exp  ->  simple_exp . SUB term   (rule 22)

    ADD 	shift, and go to state 38
    SUB 	shift, and go to state 39

    $default	reduce using rule 17 (exp)



state 48

    exp  ->  simple_exp GQ simple_exp .   (rule 18)
    simple_exp  ->  simple_exp . ADD term   (rule 21)
    simple_exp  ->  simple_exp . SUB term   (rule 22)

    ADD 	shift, and go to state 38
    SUB 	shift, and go to state 39

    $default	reduce using rule 18 (exp)



state 49

    exp  ->  simple_exp LQ simple_exp .   (rule 19)
    simple_exp  ->  simple_exp . ADD term   (rule 21)
    simple_exp  ->  simple_exp . SUB term   (rule 22)

    ADD 	shift, and go to state 38
    SUB 	shift, and go to state 39

    $default	reduce using rule 19 (exp)



state 50

    simple_exp  ->  simple_exp ADD term .   (rule 21)
    term  ->  term . MUL factor   (rule 24)
    term  ->  term . DIV factor   (rule 25)

    MUL 	shift, and go to state 40
    DIV 	shift, and go to state 41

    $default	reduce using rule 21 (simple_exp)



state 51

    simple_exp  ->  simple_exp SUB term .   (rule 22)
    term  ->  term . MUL factor   (rule 24)
    term  ->  term . DIV factor   (rule 25)

    MUL 	shift, and go to state 40
    DIV 	shift, and go to state 41

    $default	reduce using rule 22 (simple_exp)



state 52

    term  ->  term MUL factor .   (rule 24)

    $default	reduce using rule 24 (term)



state 53

    term  ->  term DIV factor .   (rule 25)

    $default	reduce using rule 25 (term)



state 54

    repeat_stmt  ->  re_flag stmt_sequence UNTIL exp .   (rule 11)

    $default	reduce using rule 11 (repeat_stmt)



state 55

    if_stmt  ->  if_flag exp THEN stmt_sequence END .   (rule 9)

    $default	reduce using rule 9 (if_stmt)



state 56

    if_stmt  ->  if_flag exp THEN stmt_sequence ELSE . stmt_sequence END   (rule 10)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    REPEAT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5

    stmt_sequence	go to state 57
    statement	go to state 7
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 57

    stmt_sequence  ->  stmt_sequence . statement FIN   (rule 2)
    if_stmt  ->  if_flag exp THEN stmt_sequence ELSE stmt_sequence . END   (rule 10)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    IF  	shift, and go to state 3
    END 	shift, and go to state 58
    REPEAT	shift, and go to state 4
    IDENTIFIER	shift, and go to state 5

    statement	go to state 18
    if_stmt	go to state 8
    repeat_stmt	go to state 9
    assign_stmt	go to state 10
    read_stmt	go to state 11
    write_stmt	go to state 12
    var_name	go to state 13
    if_flag	go to state 14
    re_flag	go to state 15



state 58

    if_stmt  ->  if_flag exp THEN stmt_sequence ELSE stmt_sequence END .   (rule 10)

    $default	reduce using rule 10 (if_stmt)



state 59

    $   	go to state 60



state 60

    $   	go to state 61



state 61

    $default	accept
